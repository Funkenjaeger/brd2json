int supplylayers[];
int firstentry;

int SPEC_VERSION = 1;

string TAB_STR = "    ";

void Error(string s)
{
	string cmd;
	for(int x=0;x<argc;x++) cmd+=argv[x]+" ";
	dlgMessageBox(cmd+"\n"+s);
	exit(EXIT_FAILURE);
}

string tab(int n)
{
	string s = "";
	for(int i=0; i<n; i++)
		s += TAB_STR;
	return s;
}

void AddWire(UL_WIRE W, int L, int indent)
{
	if(W.layer!=L) return;

	printf(tab(indent));
	if(!firstentry) printf(",");
	firstentry = 0;
	if(W.arc) {
		int rot = 0;
		if((W.arc.angle2 - W.arc.angle1) > 180) {rot = 1;}
		printf("{\"type\": \"arc\", \"svgpath\": \"M %f %f A %f %f 0 %d 0 %f %f\", \"width\": %f}\n", u2inch(W.arc.x1), -u2inch(W.arc.y1), u2inch(W.arc.radius), u2inch(W.arc.radius), rot, u2inch(W.arc.x2), -u2inch(W.arc.y2), u2inch(W.width));
	}
	else printf("{\"type\": \"segment\", \"start\": [%f,%f], \"end\": [%f, %f], \"width\": %f}\n", u2inch(W.x1), -u2inch(W.y1), u2inch(W.x2), -u2inch(W.y2), u2inch(W.width));
}

void AddHole(UL_HOLE H, int L, int indent)
{
	printf(tab(indent));
	if(!firstentry) printf(",");
	firstentry = 0;
	printf("{\"type\": \"circle\", \"start\": [%f,%f], \"radius\": %f, \"width\": %f}\n", u2inch(H.x), -u2inch(H.y), u2inch(H.drill)/2, 0.005);
}

void AddCircle(UL_CIRCLE C, int L, int indent)
{
	int d;
	if(C.layer!=L) return;
	
	printf(tab(indent));
	if(!firstentry) printf(",");
	firstentry = 0;
	printf("{\"type\": \"circle\", \"start\": [%f,%f], \"radius\": %f, \"width\": %f}\n", u2inch(C.x), -u2inch(C.y), u2inch(C.radius), u2inch(C.width));
}

//TODO: implement this
void AddRect(UL_RECTANGLE R, int L, int indent)
{
	int d;
	if(R.layer!=L) return;
}

// TODO: implement this
void AddPoly(UL_POLYGON P, int L, int indent)
{
	int d;
	int first=1;
	int tmpx,tmpy;
	int fastfill;

	if(P.layer!=L) return;
}

board(B)
{
	int d,x,y;
	int lays[];
	int laycnt;

	string tmpstr;
	string tmpstrarr[];
	string fileName;
	string lname="unnamed";
	string layernames[];

	B.layers(L)
	{
		if(strsub(L.name,0,1)=="$") supplylayers[L.number]=1;
		else supplylayers[L.number]=0;
		layernames[L.number]=L.name;
	}

	sprintf(fileName,"%s.json",filesetext(B.name, ""));

	int thisl;
	int ilvl = 0;
	output(fileName,"wt")
	{
		// overall 'pcbdata' object
		printf("{\n");
		//printf(tab(++ilvl) + "\"_type\": \"interactivehtmlbom pcbdata\",\n");
		printf(tab(ilvl) + "\"spec_version\": 1,\n");
		printf(tab(ilvl++) + "\"pcbdata\": {\n");
		
		// edges bbox
		printf(tab(ilvl) + "\"edges_bbox\": {\"minx\": %f, \"miny\": %f, \"maxx\": %f, \"maxy\": %f},\n", u2inch(B.area.x1), -u2inch(B.area.y1), u2inch(B.area.x2), -u2inch(B.area.y2));
		
		// edges (outline - from layer 20 'Dimension')
		printf(tab(ilvl) + "\"edges\": [\n");
		firstentry=1;
		ilvl++;
		B.wires(W) AddWire(W,20,ilvl);
		//B.polygons(P) AddPoly(P,thisl);
		B.rectangles(R) AddRect(R,20,ilvl);
		B.circles(C) AddCircle(C,20,ilvl);
		B.holes(H) AddHole(H,20,ilvl);
		printf(tab(--ilvl) + "],\n"); // end edges
		
		// drawings
		printf(tab(ilvl++) + "\"drawings\": {\n");
		// silkscreen
		printf(tab(ilvl) + "\"silkscreen\": {\n");
		int silk_layers[] = {21,25,22,26};
		int e;
		firstentry=1;
		for(d=0;d<4;d+=2) 
		{		
			if(d==0) {
				printf(tab(++ilvl) + "\"F\": [\n");
			} else {
				printf(tab(--ilvl) + "],\n"); 
				printf(tab(ilvl) + "\"B\": [\n");
				firstentry = 1;
			}
			ilvl++;
			for(e=0; e<2; e++)
			{
				thisl=silk_layers[d+e];
				B.wires(W) AddWire(W,thisl,ilvl);
				//B.polygons(P) AddPoly(P,thisl);
				B.rectangles(R) AddRect(R,thisl,ilvl);
				B.circles(C) AddCircle(C,thisl,ilvl);
				B.texts(T) T.wires(W) AddWire(W,thisl,ilvl);
				//B.holes(H) AddHole(H,thisl);
			}
		}
		printf(tab(--ilvl) + "]\n"); 
		printf(tab(--ilvl) + "},\n"); //end silkscreen
		
		//fabrication
		printf(tab(ilvl++) + "\"fabrication\": {\n"); 
		printf(tab(ilvl) + "\"F\": [],\n"); 
		printf(tab(ilvl) + "\"B\": []\n"); 
		printf(tab(--ilvl) + "}\n");
		
		printf(tab(--ilvl) + "},\n"); // end drawings
		
		// footprints
		status("Plotting elements");
		printf(tab(ilvl++) + "\"footprints\": [\n");
		firstentry = 1;
		B.elements(E)
		{
			int contactcount = 0;
			E.package.contacts(C) contactcount++;
			if(E.populate && contactcount) {
				if(firstentry)
					printf(tab(ilvl++) + "{\n");
				else
					printf(tab(ilvl++) + ",{\n");
				firstentry = 0;
				
				//ref
				printf(tab(ilvl) + "\"ref\": \"%s\",\n", E.name);
				
				//center
				printf(tab(ilvl) + "\"center\": [%f, %f],\n", u2inch(E.x), -u2inch(E.y)); 
								
				// bbox
				printf(tab(ilvl++) + "\"bbox\": {\n");
				real xmax = -999.0, xmin = 999.0, ymax = xmax, ymin = xmin, dx, dy;
				E.package.contacts(C) {
					if(C.smd) {
						dx = abs((u2inch(C.smd.dx)/2)*cos(C.smd.angle)) + abs((u2inch(C.smd.dy)/2)*sin(C.smd.angle));
						dy = abs((u2inch(C.smd.dx)/2)*sin(C.smd.angle)) + abs((u2inch(C.smd.dy)/2)*cos(C.smd.angle));
					} else {
						dx = u2inch(C.pad.diameter[LAYER_TOP])/2;
						dy = dx;
					}
					if (u2inch(C.x) + dx > xmax) xmax = u2inch(C.x) + dx;
					if (u2inch(C.y) + dy > ymax) ymax = u2inch(C.y) + dy;
					if (u2inch(C.x) - dx < xmin) xmin = u2inch(C.x) - dx;
					if (u2inch(C.y) - dy < ymin) ymin = u2inch(C.y) - dy;
				}
				dx = abs(xmax - xmin);
				dy = abs(ymax-ymin);
				printf(tab(ilvl) + "\"pos\": [%f, %f],\n", (xmin+xmax-dx)/2, -(ymin+ymax+dy)/2);
				printf(tab(ilvl) + "\"relpos\": [0, 0],\n");
				printf(tab(ilvl) + "\"size\": [%f, %f],\n", dx, dy);
				printf(tab(ilvl) + "\"angle\": %f\n", 0.0); // E.angle);
				printf(tab(--ilvl) + "},\n"); // end bbox
				
				// pads
				printf(tab(ilvl++) + "\"pads\": [\n");
				int firstpad = 1;
				E.package.contacts(C) {
					if(firstpad)	{	printf(tab(ilvl++) + "{\n"); firstpad = 0; }
					else			{	printf(tab(ilvl++) + ",{\n"); }
					printf(tab(ilvl) + "\"layers\": ");
					
					if(C.smd) {
						int layer = E.mirror ? LAYER_BOTTOM : LAYER_TOP;
						if(layer == LAYER_BOTTOM) printf("[\"B\"],\n");
						else printf("[\"F\"],\n");
						
						printf(tab(ilvl) + "\"pos\": [%f, %f],\n", u2inch(C.x), -u2inch(C.y));
						
						// Workaround: if the part does not have the STOP flag (e.g. certain fiducials), assume we cannot use the layer index
						if (C.smd.flags & SMD_FLAG_STOP) printf(tab(ilvl) + "\"size\": [%f, %f],\n", u2inch(C.smd.dx[layer]), u2inch(C.smd.dy[layer])); 
						else printf(tab(ilvl) + "\"size\": [%f, %f],\n", u2inch(C.smd.dx), u2inch(C.smd.dy)); 
						
						printf(tab(ilvl) + "\"angle\": %f,\n", -C.smd.angle); 
						printf(tab(ilvl) + "\"shape\": ");
						//TODO: make this work for 0<roundness<100 (rounded rectangle)
						if(C.smd.roundness == 100) printf("\"circle\",\n");
						else printf("\"rect\",\n"); 
						printf(tab(ilvl) + "\"type\": \"smd\"\n");
						if(C.smd.name == "1") printf(tab(ilvl) + ",\"pin1\": 1\n");
					} else {
						printf("[\"F\", \"B\"],\n");
						printf("                              \"pos\": [%f, %f],\n", u2inch(C.x), -u2inch(C.y));
						printf("                              \"size\": [%f, %f],\n", u2inch(C.pad.diameter[LAYER_TOP]), u2inch(C.pad.diameter[LAYER_TOP]));
						printf("                              \"angle\": %f,\n", C.pad.angle); 
						if(C.pad.shape[LAYER_TOP] == PAD_SHAPE_SQUARE) 	printf("                              \"shape\": \"rect\",\n"); 
						else if (C.pad.shape[LAYER_TOP] == PAD_SHAPE_LONG)	printf("                              \"shape\": \"oval\",\n");
						else									printf("                              \"shape\": \"circle\",\n");
						printf("                              \"type\": \"th\",\n");
						if(C.pad.name == "1") printf("                              \"pin1\": 1,\n");
						printf("                              \"drillshape\": \"oblong\",\n");
						printf("                              \"drillsize\": [%f, %f]\n", u2inch(C.pad.drill), u2inch(C.pad.drill));
					}
					printf(tab(--ilvl) + "}\n"); // end pad
				}
				printf(tab(--ilvl) + "],\n"); // end pads
				
				printf(tab(ilvl) + "\"drawings\": [],\n");
				if(E.mirror)	printf(tab(ilvl) + "\"layer\": \"B\"\n");
				else 			printf(tab(ilvl) + "\"layer\": \"F\"\n");
				printf(tab(--ilvl) + "}\n"); //end footprint
			}
		}
		printf(tab(--ilvl) + "],\n"); //end footprints
		
		// metadata
		
		printf(tab(ilvl++) + "\"metadata\": {\n"); 
		string a[];		
		int n = strsplit(a, B.name, '/');
		strsplit(a,a[n-1],'.');		
		printf(tab(ilvl) + "\"title\": \"%s\",\n", a[0]);
		printf(tab(ilvl) + "\"revision\": \"%s\",\n", ""); 
		printf(tab(ilvl) + "\"company\": \"%s\",\n", ""); 
		int t = time();
		sprintf(tmpstr,"%d-%d-%d %d:%02d:%02d", t2year(t), t2month(t)+1, t2day(t), t2hour(t), t2minute(t), t2second(t));
		printf(tab(ilvl) + "\"date\": \"%s\"\n", tmpstr); 
		printf(tab(--ilvl) + "}\n");
		
		printf(tab(--ilvl) + "}\n"); // end of pcbdata object
		
		// components object
		printf(tab(ilvl++) + ",\"components\": [\n");
		firstentry = 1;
		B.elements(E)
		{
			int contactcount = 0;
			E.package.contacts(C) contactcount++;
			if(E.populate && contactcount) {
				if(firstentry)	{	printf(tab(ilvl++) + "{\n");	firstentry=0;	}
				else 			{	printf(tab(ilvl++) + ",{\n");	}
				printf(tab(ilvl) + "\"attr\": \"%s\",\n",""); // TODO: actually get attributes
				printf(tab(ilvl) + "\"footprint\": \"%s\",\n",E.package.name);
				if(E.mirror)	printf(tab(ilvl) + "\"layer\": \"B\",\n");
				else 			printf(tab(ilvl) + "\"layer\": \"F\",\n");
				printf(tab(ilvl) + "\"ref\": \"%s\",\n", E.name);
				printf(tab(ilvl) + "\"val\": \"%s\"\n", E.value);
				printf(tab(ilvl++) + ",\"extra_fields\": { \n");
				int firstattribute = 1;
				E.attributes(A) {
					printf(tab(ilvl));
					if(!firstattribute) { printf(","); } 
					firstattribute = 0;
					printf("\"%s\": \"%s\"\n", A.name, A.value);
				}
				printf(tab(--ilvl) + "}\n"); // end extra fields
				printf(tab(--ilvl) + "}\n"); // end component
			}
		}
		printf(tab(--ilvl) + "]\n"); // end of components list
		
		printf(tab(--ilvl) + "}\n"); // end of overall object

		status("Done");
	}
}
